#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test resumable flow with deterministic initialization to verify the effect of
feedback value. 
Copyright (C) 2023, Huawei Technologies Co., Ltd. All rights reserved.
"""
import os
import shutil
import subprocess
import unittest
import filecmp
import tempfile
import glob


class TestAutoTunerFeedback(unittest.TestCase):
    """
    Test the impact of feedback value on AutoTuner flow.
    """
    def setUp(self):
        curr_dir = os.path.dirname(os.path.abspath(__file__))
        self.autotuner_dir = os.path.join(curr_dir, "..", "..", "bin")
        self.input_dir = os.path.join(curr_dir, "Inputs", "opp")

        self.base_dir = tempfile.TemporaryDirectory()
        self.run_dir_1 = tempfile.TemporaryDirectory(dir=self.base_dir.name)
        self.run_dir_2 = tempfile.TemporaryDirectory(dir=self.base_dir.name)

    def run_autotuner(self, output_dir, feedback_time, technique):
        """
        Running AutoTuner
        """
        temp_data_dir = tempfile.TemporaryDirectory(dir=self.base_dir.name)
        data_dir = temp_data_dir.name
        os.environ["AUTOTUNE_DATADIR"] = data_dir
        opp_dir = os.path.join(data_dir, "opp")
        shutil.copytree(self.input_dir, opp_dir)

        cmd = [
            os.path.join(self.autotuner_dir, "llvm-autotune"),
            "minimize",
            "--deterministic",
            "True",
            "--technique",
            technique,
        ]
        if os.name == "nt":
            cmd.insert(0, "py")

        subprocess.run(cmd, check=True, stderr=subprocess.DEVNULL)
        shutil.copyfile(
            os.path.join(data_dir, "config.yaml"),
            os.path.join(output_dir, "initialize.yaml")
        )

        for i in range(10):
            cmd = [
                os.path.join(self.autotuner_dir, "llvm-autotune"),
                "feedback",
                f"{feedback_time[i]}",
            ]
            if os.name == "nt":
                cmd.insert(0, "py")

            subprocess.run(cmd, check=True, stderr=subprocess.DEVNULL)
            shutil.copyfile(
                os.path.join(data_dir, "config.yaml"),
                os.path.join(output_dir, f"feedback-{i}.yaml")
            )

        cmd = [os.path.join(self.autotuner_dir, "llvm-autotune"), "finalize"]
        if os.name == "nt":
            cmd.insert(0, "py")
        subprocess.run(cmd, check=True, stderr=subprocess.DEVNULL)
        shutil.copyfile(
            os.path.join(data_dir, "config.yaml"),
            os.path.join(output_dir, "finalize.yaml")
        )
        temp_data_dir.cleanup()

    def test_feedback_use(self):
        """
        UniformGreedyMutation05 uses the feedback value to determine the best
        config in each iteration (found so far) and use it to generate next
        config. Two AutoTuner flows are executed with 1) increasing and
        2) decreasing feedback values. Best config will remain the same for
        increasing feedback value and will change in every iteration for
        decreasing feedback value. As a result, both flows start with identical
        config (due to deterministic flag) and will differ in subsequent
        iterations.
        """
        # Deterministic tuning run with increasing feedback time.
        time = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        self.run_autotuner(self.run_dir_1.name, time, "UniformGreedyMutation05")

        # Deterministic tuning run with decreasing feedback time.
        time = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
        self.run_autotuner(self.run_dir_2.name, time, "UniformGreedyMutation05")

        self.assertTrue(
            filecmp.cmp(
                os.path.join(self.run_dir_1.name, "initialize.yaml"),
                os.path.join(self.run_dir_2.name, "initialize.yaml")
            )
        )

        result = True
        # Pair-wise comparison of config files generated by both runs. All of
        # pairs will not be identical due to dependance on feedback value.
        file_names = [
            os.path.basename(file)
            for file in glob.glob(os.path.join(self.run_dir_1.name, "feedback*"))
        ]
        for file in file_names:
            result &= filecmp.cmp(
                os.path.join(self.run_dir_1.name, file),
                os.path.join(self.run_dir_2.name, file)
            )
        self.assertFalse(result)

        self.assertFalse(
            filecmp.cmp(
                os.path.join(self.run_dir_1.name, "finalize.yaml"),
                os.path.join(self.run_dir_2.name, "finalize.yaml")
            )
        )
        self.run_dir_1.cleanup()
        self.run_dir_2.cleanup()
        self.base_dir.cleanup()

    def test_feedback_random_config(self):
        """
        DifferentialEvolution search technique generates 30 configs during
        initialization and does not use feedback values till all the initially
        created configs are tested. This test runs AutoTuner with 1) increasing
        and 2) decreasing feedback values; however generated config for both
        AutoTuning flows will be identical for each iteration. 
        """
        # Deterministic tuning run with increasing feedback time.
        time = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
        self.run_autotuner(self.run_dir_1.name, time, "DifferentialEvolution")

        # Deterministic tuning run with decreasing feedback time.
        time = [10, 9, 8, 7, 6, 5, 4, 3, 2, 1]
        self.run_autotuner(self.run_dir_2.name, time, "DifferentialEvolution")

        self.assertTrue(
            filecmp.cmp(
                os.path.join(self.run_dir_1.name, "initialize.yaml"),
                os.path.join(self.run_dir_2.name, "initialize.yaml")
            )
        )
        result = True
        # Pair-wise compare config files generated by both runs and assert
        # that each pair are identical.
        file_names = [
            os.path.basename(file)
            for file in glob.glob(os.path.join(self.run_dir_1.name, "feedback*"))
        ]
        for file in file_names:
            result &= filecmp.cmp(
                os.path.join(self.run_dir_1.name, file),
                os.path.join(self.run_dir_2.name, file)
            )

        self.assertTrue(result)

        self.assertFalse(
            filecmp.cmp(
                os.path.join(self.run_dir_1.name, "finalize.yaml"),
                os.path.join(self.run_dir_2.name, "finalize.yaml")
            )
        )

        self.run_dir_1.cleanup()
        self.run_dir_2.cleanup()
        self.base_dir.cleanup()


    def test_pending_results(self):
        """
        Test AutoTuner to handle requests for duplicate generated configuration.
        A deterministic configuration is used to ensure the generation of
        duplicate configuration by given search technique.
        """
        temp_data_dir = tempfile.TemporaryDirectory(dir=self.base_dir.name)
        data_dir = temp_data_dir.name
        os.environ["AUTOTUNE_DATADIR"] = data_dir
        opp_dir = os.path.join(data_dir, "opp")
        shutil.copytree(self.input_dir, opp_dir)

        cmd = [
            os.path.join(self.autotuner_dir, "llvm-autotune"),
            "minimize",
            "--deterministic",
            "True",
            "--technique",
            "ResumablePatternSearch",
            "--seed",
            "3",
            "--trials",
            "15"
        ]
        if os.name == "nt":
            cmd.insert(0, "py")

        GeneratedLog = subprocess.run(
            cmd, check=True, stderr=subprocess.PIPE
        ).stderr.decode()
        ExpectedLog = "duplicate configuration request"
        self.assertIn(ExpectedLog, GeneratedLog)

        temp_data_dir.cleanup()
        self.run_dir_1.cleanup()
        self.run_dir_2.cleanup()
        self.base_dir.cleanup()


if __name__ == "__main__":
    unittest.main(buffer=True)
