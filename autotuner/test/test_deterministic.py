#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Test to run AutoTuner in deterministic manner
Copyright (C) 2017-2021, Huawei Technologies Co., Ltd. All rights reserved.
"""
import os
import shutil
import subprocess
import unittest
import filecmp
import tempfile


class TestAutoTunerDeterministic(unittest.TestCase):
    """
    Test the deterministic and non-deterministic approach in AutoTuner
    """

    def setUp(self):
        self.output_stream = ""
        self.base_dir = ""
        self.autotuner_dir = ""


    def compare_yaml_file(self, file_1, file_2):
        """
        Compare two yaml files by their contents using pyyaml
        """
        try:
            return filecmp.cmp(file_1, file_2)
        except AssertionError:
            print(self.output_stream)
            shutil.rmtree(self.base_dir)
            raise


    def run_autotuner(self, data_dir, output_dir, input_dir,
                      deterministic=None):
        """
        Running AutoTuner
        """
        # mock feedback time
        mock_time = [19.92, 20.85, 19.65, 19.71, 19.50]

        opp_dir = os.path.join(data_dir, "opp")
        shutil.copytree(input_dir, opp_dir)

        cmd = [os.path.join(self.autotuner_dir, "llvm-autotune"), "minimize"]
        if os.name == "nt":
            cmd.insert(0, "py")
        if deterministic is not None:
            cmd.extend(["--deterministic=" + str(deterministic)])

        self.output_stream = (
            self.output_stream
            + subprocess.run(cmd, check=True, stderr=subprocess.PIPE).stderr.decode()
        )
        shutil.copyfile(
            os.path.join(data_dir, "config.yaml"),
            os.path.join(output_dir, "initialize.yaml"),
        )

        for i in range(5):
            cmd = [
                os.path.join(self.autotuner_dir, "llvm-autotune"),
                "feedback",
                f"{mock_time[i]}",
            ]
            if os.name == "nt":
                cmd.insert(0, "py")
            self.output_stream = (
                self.output_stream
                + subprocess.run(cmd, stderr=subprocess.PIPE).stderr.decode()
            )
            shutil.copyfile(
                os.path.join(data_dir, "config.yaml"),
                os.path.join(output_dir, f"feedback-{i}.yaml"),
            )

        cmd = [os.path.join(self.autotuner_dir, "llvm-autotune"), "finalize"]
        if os.name == "nt":
            cmd.insert(0, "py")
        self.output_stream = (
            self.output_stream
            + subprocess.run(cmd, stderr=subprocess.PIPE).stderr.decode()
        )
        shutil.copyfile(
            os.path.join(data_dir, "config.yaml"),
            os.path.join(output_dir, "finalize.yaml"),
        )

    def test_deterministic(self):
        self.output_stream = ""
        curr_dir = os.path.dirname(os.path.abspath(__file__))
        self.autotuner_dir = os.path.join(curr_dir, "..", "..", "bin")
        input_dir = os.path.join(curr_dir, "Inputs", "opp")

        self.base_dir = tempfile.TemporaryDirectory()
        run_dir_1 = tempfile.TemporaryDirectory(dir=self.base_dir.name)
        run_dir_2 = tempfile.TemporaryDirectory(dir=self.base_dir.name)

        data_dir = tempfile.TemporaryDirectory(dir=self.base_dir.name)
        os.environ["AUTOTUNE_DATADIR"] = data_dir.name

        # Deterministic Run 1.
        self.run_autotuner(data_dir.name, run_dir_1.name, input_dir, True)
        data_dir.cleanup()

        data_dir = tempfile.TemporaryDirectory(dir=self.base_dir.name)
        os.environ["AUTOTUNE_DATADIR"] = data_dir.name

        # Deterministic Run 2.
        self.run_autotuner(data_dir.name, run_dir_2.name, input_dir, True)

        out = True
        # Pair-wise compare config files generated by both runs and assert
        # that each pair are identical.
        for file in os.listdir(run_dir_1.name):
            out &= self.compare_yaml_file(
                os.path.join(run_dir_1.name, file), os.path.join(run_dir_2.name, file)
            )

        self.assertTrue(out)

        data_dir.cleanup()
        run_dir_1.cleanup()
        run_dir_2.cleanup()
        self.base_dir.cleanup()


    def test_random(self):
        self.output_stream = ""
        curr_dir = os.path.dirname(os.path.abspath(__file__))
        self.autotuner_dir = os.path.join(curr_dir, "..", "..", "bin")
        input_dir = os.path.join(curr_dir, "Inputs", "opp")

        self.base_dir = tempfile.TemporaryDirectory()
        run_dir_1 = tempfile.TemporaryDirectory(dir=self.base_dir.name)
        run_dir_2 = tempfile.TemporaryDirectory(dir=self.base_dir.name)

        data_dir = tempfile.TemporaryDirectory(dir=self.base_dir.name)
        os.environ["AUTOTUNE_DATADIR"] = data_dir.name

        # Non-deterministic Run 1.
        self.run_autotuner(data_dir.name, run_dir_1.name, input_dir, False)
        data_dir.cleanup()

        data_dir = tempfile.TemporaryDirectory(dir=self.base_dir.name)
        os.environ["AUTOTUNE_DATADIR"] = data_dir.name

        # Non-deterministic Run 2.
        self.run_autotuner(data_dir.name, run_dir_2.name, input_dir)

        out = True
        # Pair-wise compare config files generated (randomly) by both runs and
        # assert that one or more pairs are different.
        for file in os.listdir(run_dir_1.name):
            out &= self.compare_yaml_file(
                os.path.join(run_dir_1.name, file), os.path.join(run_dir_2.name, file)
            )

        self.assertFalse(out)

        data_dir.cleanup()
        run_dir_1.cleanup()
        run_dir_2.cleanup()
        self.base_dir.cleanup()


    def test_seed_file(self):
        """
        Test for saving and using random state. AutoTuner is initialized with
        random search space and AutoTuner will save the current random state
        as a file in the data directory. This random state file is reused to
        initialize the AutoTuner again for same set of opportunities. Hence,
        both initialization will generate identical 'config.yaml' file.
        """
        self.output_stream = ""
        curr_dir = os.path.dirname(os.path.abspath(__file__))
        self.autotuner_dir = os.path.join(curr_dir, "..", "..", "bin")
        input_dir = os.path.join(curr_dir, "Inputs", "opp")

        self.base_dir = tempfile.TemporaryDirectory()

        data_dir = tempfile.TemporaryDirectory(dir=self.base_dir.name)
        os.environ["AUTOTUNE_DATADIR"] = data_dir.name

        opp_dir = os.path.join(data_dir.name, "opp")
        shutil.copytree(input_dir, opp_dir)

        cmd = [os.path.join(self.autotuner_dir, "llvm-autotune"), "minimize"]
        if os.name == "nt":
            cmd.insert(0, "py")

        self.output_stream = (
            self.output_stream
            + subprocess.run(cmd, check=True, stderr=subprocess.PIPE).stderr.decode()
        )
        shutil.copyfile(
            os.path.join(data_dir.name, "config.yaml"),
            os.path.join(self.base_dir.name, "config.yaml"),
        )
        shutil.copyfile(
            os.path.join(data_dir.name, "random_state.seed"),
            os.path.join(self.base_dir.name, "random_state.seed"),
        )
        data_dir.cleanup()

        data_dir = tempfile.TemporaryDirectory(dir=self.base_dir.name)
        os.environ["AUTOTUNE_DATADIR"] = data_dir.name

        opp_dir = os.path.join(data_dir.name, "opp/")
        shutil.copytree(input_dir, opp_dir)

        seed_file = os.path.join(self.base_dir.name, "random_state.seed")
        cmd = [
            os.path.join(self.autotuner_dir, "llvm-autotune"),
            "minimize",
            "--deterministic=True",
            f"--seed-file={seed_file}",
        ]
        if os.name == "nt":
            cmd.insert(0, "py")
        self.output_stream = (
            self.output_stream
            + subprocess.run(cmd, stderr=subprocess.PIPE).stderr.decode()
        )

        self.assertTrue(
            self.compare_yaml_file(
                os.path.join(data_dir.name, "config.yaml"),
                os.path.join(self.base_dir.name, "config.yaml"),
            )
        )

        data_dir.cleanup()
        self.base_dir.cleanup()


if __name__ == "__main__":
    unittest.main(buffer=True)
